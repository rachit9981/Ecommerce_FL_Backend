name: Python Backend CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to server
        env:
          REMOTE_REPO_DIR: /root/Ecommerce_FL_Backend
          REMOTE_VENV_DIR: /root/Ecommerce_FL_Backend/venv
          GIT_URL: https://github.com/rachit9981/Ecommerce_FL_Backend.git
          GUNICORN_SERVICE: gunicorn
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" \
          ssh -o StrictHostKeyChecking=no "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
          "REMOTE_REPO_DIR='$REMOTE_REPO_DIR' REMOTE_VENV_DIR='$REMOTE_VENV_DIR' GIT_URL='$GIT_URL' GUNICORN_SERVICE='$GUNICORN_SERVICE'" \
          bash -s <<'EOSSH'
            set -e

            # ── 1. One‑time: trust GitHub host key ───────────────────────────
            mkdir -p ~/.ssh
            if ! grep -q github.com ~/.ssh/known_hosts 2>/dev/null; then
              ssh-keyscan -t rsa,ecdsa,ed25519 github.com >> ~/.ssh/known_hosts 2>/dev/null
            fi

            # ── 2. Clone or update repo ──────────────────────────────────────
            echo "📁 Ensuring repo folder exists…"
            mkdir -p "$REMOTE_REPO_DIR"
            cd "$REMOTE_REPO_DIR"

            if [ ! -d .git ]; then
              echo "🔰 First-time clone…"
              git clone "$GIT_URL" .
            else
              echo "🔄 Pulling latest code…"
              git remote set-url origin "$GIT_URL"
              git fetch --prune
              git reset --hard origin/main
            fi

            # ── 3. Update venv & dependencies ───────────────────────────────
            source "$REMOTE_VENV_DIR/bin/activate"
            pip install --upgrade pip
            pip install --upgrade -r requirements.txt

            # ── 4. Apply migrations & collect static files (optional) ──────
            cd "$REMOTE_REPO_DIR"
            python manage.py makemigrations
            python manage.py migrate

            # ── 5. Restart Gunicorn systemd service ─────────────────────────
            echo "🔄 Restarting Gunicorn service '$GUNICORN_SERVICE'…"
            sudo systemctl daemon-reload
            sudo systemctl restart "$GUNICORN_SERVICE"
            sudo systemctl status "$GUNICORN_SERVICE" --no-pager

            echo "✅ Backend deployed & Gunicorn restarted."
          EOSSH
