# .github/workflows/backend-deploy.yml
name: Python Backend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£  Check out the repo so we can (optionally) lint / test client‚Äëside
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£  (Optional) run unit tests ‚Äì delete these three steps if you don‚Äôt need them
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install test requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-test.txt ]; then
            pip install -r requirements-test.txt
          fi

      - name: Run unit tests
        run: |
          if [ -d tests ]; then
            python -m pytest -q
          fi

      # 3Ô∏è‚É£  Install sshpass so we can use password‚Äëbased SSH
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      # 4Ô∏è‚É£  Deploy: clone/pull, install deps, restart tmux session
      - name: Deploy backend on server
        env:
          # ‚û°Ô∏è  EDIT THESE PATHS / VALUES TO MATCH YOUR SERVER
          REMOTE_REPO_DIR: /root/deploy/Ecommerce_FL_Backend            # where the repo lives on the server
          REMOTE_REPO_URL: https://github.com/LazyyVenom/Ecommerce_FL_Backend.git     # or git@github.com:‚Ä¶ if you use SSH keys
          REMOTE_VENV_DIR: /root/venvs/backend_env                       # existing virtual‚Äëenv path
          TMUX_SESSION: backend_session                                  # tmux session name
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" \
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<EOF
            set -e                       # fail fast

            echo "üìÅ  Ensuring repo folder exists‚Ä¶"
            mkdir -p "$REMOTE_REPO_DIR"

            if [ ! -d "$REMOTE_REPO_DIR/.git" ]; then
              echo "üî∞  First‚Äëtime clone‚Ä¶"
              git clone "$REMOTE_REPO_URL" "$REMOTE_REPO_DIR"
            fi

            echo "üîÑ  Updating code‚Ä¶"
            cd "$REMOTE_REPO_DIR"
            git fetch --all
            git reset --hard origin/main   # cleaner than plain pull

            echo "üêç  Updating dependencies in virtual‚Äëenv‚Ä¶"
            source "$REMOTE_VENV_DIR/bin/activate"
            pip install --upgrade -r requirements.txt

            echo "üé¨  Restarting tmux session '$TMUX_SESSION'‚Ä¶"
            if tmux has-session -t "$TMUX_SESSION" 2>/dev/null; then
              tmux kill-session -t "$TMUX_SESSION"
            fi
            tmux new-session -d -s "$TMUX_SESSION" \
              'source "$REMOTE_VENV_DIR/bin/activate" && gunicorn main:app --bind 0.0.0.0:8000'

            echo "‚úÖ  Deployment finished!"
